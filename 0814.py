import streamlit as st

# ===================== 친구 데이터 (길고 재밌게) =====================
friends = {
    "박영서": (
        "📘 겉으론 모범생, 속은 빌런. "
        "교과서 표지에 얼굴 박아도 위화감이 없지만, 막상 대화해보면 "
        "잡학지식 폭격기로 상대를 정신 못 차리게 만든다. "
        "키는 날로 솟구치고, 목소리는 차분한데, 말끝마다 묘하게 비꼬는 듯한 농담을 던져서 "
        "상대방이 ‘지금 칭찬한 건가?’ 하다보면 이미 3연타로 정신 공격 당한 상태. "
        "시험기간에 책 대신 친구 놀릴 방법을 연구하는 인간 백과사전."
    ),
    "이혜연": (
        "🎤 강자 앞에선 세상 다정, 약자(?) 앞에선 초고속 장난머신. "
        "농담을 툭툭 던지는데, 그게 다소 엉뚱해서 당하는 사람은 '뭐야?' 하다가 "
        "이미 웃고 있는 자신을 발견한다. "
        "박영서 옆에서 서브 빌런 역할을 충실히 수행하며, 장난의 창의성만큼은 피카소급. "
        "다만, 혼자 있으면 심심해서 낑낑거리는 외로움 고인물."
    ),
    "백효슬": (
        "💪 근육과 지능을 동시에 장착한 ‘물리광’ 마라탕 마스터. "
        "평범한 대화 중에도 갑자기 F=ma 같은 공식이 튀어나온다. "
        "순간적으로 ‘이 사람은 인간인가, 실험실에서 만든 생체병기인가’ 싶을 정도로 "
        "예측 불가능한 행동을 한다. 웃고 있으면 괜찮을 것 같지만, "
        "그 웃음이 전조일 수도 있다. 폭탄 같은 매력 + 체육관 냄새를 동시에 풍기는 인간."
    ),
    "오찬이": (
        "🎉 약속 잘 잡지만 실천은 ‘다음 생에’. "
        "오늘 ‘샤브샤브 올데이’ 하자더니 벌써 한 달째 미루는 중. "
        "덕질은 4차원적 열정으로 하고, 아이돌 콘서트에서는 본체가 아닌 "
        "혼이 무대 위로 나가 있는 타입. "
        "즉흥적인 기분으로 여행 가자고 했다가, 다음 날 집에서 넷플릭스 보는 "
        "자기 자신을 보며 ‘아, 난 이런 사람이었지’라고 깨닫는 귀차니즘 장인."
    ),
    "송수민": (
        "🔥 외강내유 그 자체. "
        "피구계의 전설로, 공을 던지면 소리보다 빨리 날아간다는 소문이 있다. "
        "장난치려면 미리 유서 써야 할 정도로 포스가 장난 아니지만, "
        "가끔 꺼내는 부드러운 말투와 섬세한 배려는 솜사탕처럼 달콤하다. "
        "누군가 울면 옆에서 아무 말 없이 어깨를 토닥여주는 ‘철권 힐러’."
    ),
    "강수현": (
        "🍔 인생의 80%는 먹는 얘기, 나머지 20%는 웃기는 얘기. "
        "수학도 잘하고, 화장도 잘하고, 심지어 먹방까지 잘하는 전방위 인재. "
        "송수민의 오른팔로서 충성심이 거의 999%에 달한다. "
        "새로운 맛집을 찾으면 ‘연구 논문 발표’처럼 프레젠테이션이 가능하다."
    ),
    "원민이": (
        "🌿 나무늘보가 사람으로 환생한 듯한 평화주의자. "
        "감정 기복이 거의 제로라서, 주변 사람들의 감정 폭풍 속에서도 "
        "마치 연못 위의 백조처럼 잔잔하다. "
        "하지만 한 번 입을 열면, 의외로 핵심을 찌르는 말로 모두를 놀래킨다. "
        "조용하지만 존재감 있는 ‘분위기 마법사’."
    )
}

# ===================== 질문 데이터 =====================
questions = [
    {
        "question": "1. 주말에 뭐 하고 싶어?",
        "options": {
            "a": "책 읽고 혼자 시간 보내기",
            "b": "친구 만나서 수다 떨기",
            "c": "운동이나 땀나는 활동",
            "d": "집에서 넷플릭스 정주행",
        }
    },
    {
        "question": "2. 친구가 장난치면 넌?",
        "options": {
            "a": "일단 참다가 복수한다",
            "b": "같이 장난치며 논다",
            "c": "진심으로 삐진다",
            "d": "장난은 싫어한다",
        }
    },
    {
        "question": "3. 무인도에 간다면 챙길 것은?",
        "options": {
            "a": "물리책",
            "b": "거울과 화장품",
            "c": "휴대폰과 와이파이",
            "d": "마음의 평화",
        }
    }
]

# ===================== 점수 매핑 =====================
answer_map = {
    "a": ["박영서", "백효슬"],
    "b": ["이혜연", "강수현"],
    "c": ["송수민", "백효슬"],
    "d": ["오찬이", "원민이"]
}

# ===================== Streamlit UI =====================
st.set_page_config(page_title="친구 추천 성격 테스트", page_icon="🎯")
st.title("🎯 친구 추천 성격 테스트")
st.write("당신의 성격에 맞는 친구를 찾아드릴게요!")

# 답변 수집
user_answers = []
for idx, q in enumerate(questions):
    choice = st.radio(
        q["question"],
        options=list(q["options"].keys()),
        format_func=lambda x, q=q: f"{x}) {q['options'][x]}",
        key=f"q{idx}"
    )
    user_answers.append(choice)

# 결과 보기
if st.button("결과 보기"):
    scores = {name: 0 for name in friends}
    for ans in user_answers:
        for name in answer_map.get(ans, []):
            scores[name] += 1

    max_score = max(scores.values())
    winners = [name for name, score in scores.items() if score == max_score]

    if len(winners) == 1:
        w = winners[0]
        st.subheader("🎉 당신에게 잘 맞는 친구는...")
        st.success(f"✨ {w} ✨\n\n{friends[w]}")
    else:
        st.subheader("🎉 당신과 잘 맞는 친구들:")
        for w in winners:
            st.markdown(f"**✨ {w} ✨**")
            st.write(friends[w])

